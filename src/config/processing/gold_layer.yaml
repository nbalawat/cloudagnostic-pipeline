---
name: "Gold Layer Processing"
description: "Business-level aggregations and metrics"
version: "1.0"

aggregations:
  - name: "customer_metrics"
    source_table: "silver.transactions"
    output:
      table: "gold.customer_metrics"
      format: "delta"
      mode: "merge"
      merge_key: ["customer_id"]
    time_window:
      - interval: "30_days"
        metrics:
          - name: "total_spend"
            expr: "sum(amount) where transaction_type = 'DEBIT'"
          - name: "total_income"
            expr: "sum(amount) where transaction_type = 'CREDIT'"
          - name: "transaction_count"
            expr: "count(*)"
          - name: "average_transaction_size"
            expr: "avg(amount)"
      - interval: "90_days"
        metrics:
          - name: "spending_trend"
            expr: "regr_slope(amount, date_diff('day', transaction_date, current_date()))"
          - name: "category_distribution"
            expr: "map_agg(category, cast(sum(amount) as decimal(18,2)))"
    dimensions: ["customer_id", "country", "customer_segment"]
    quality_checks:
      - type: "completeness"
        threshold: 1.0
      - type: "freshness"
        max_delay_hours: 24

  - name: "product_performance"
    source_table: "silver.transactions"
    output:
      table: "gold.product_performance"
      format: "delta"
      mode: "merge"
      merge_key: ["product_id", "report_date"]
    time_window:
      - interval: "daily"
        metrics:
          - name: "revenue"
            expr: "sum(amount)"
          - name: "units_sold"
            expr: "count(*)"
          - name: "unique_customers"
            expr: "count(distinct customer_id)"
      - interval: "weekly"
        metrics:
          - name: "revenue_growth"
            expr: "lag(sum(amount), 1) over (partition by product_id order by week_start)"
          - name: "customer_retention"
            expr: "count(distinct case when previous_purchase_date is not null then customer_id end) / 
                   nullif(count(distinct customer_id), 0)"
    dimensions: ["product_id", "category", "region"]
    quality_checks:
      - type: "anomaly_detection"
        metrics: ["revenue", "units_sold"]
        algorithm: "zscore"
        threshold: 3

  - name: "regional_performance"
    source_tables: 
      - "silver.transactions"
      - "silver.customers"
    output:
      table: "gold.regional_performance"
      format: "delta"
      mode: "merge"
      merge_key: ["region", "report_date"]
    time_window:
      - interval: "monthly"
        metrics:
          - name: "total_revenue"
            expr: "sum(amount)"
          - name: "active_customers"
            expr: "count(distinct customer_id)"
          - name: "new_customers"
            expr: "count(distinct case when customer_acquisition_date >= date_trunc('month', current_date) 
                   then customer_id end)"
          - name: "customer_churn_rate"
            expr: "1 - count(distinct case when last_activity_date >= date_sub(current_date, 30) 
                   then customer_id end) / nullif(count(distinct customer_id), 0)"
    dimensions: ["region", "country", "customer_segment"]
    quality_checks:
      - type: "trend_validation"
        metrics: ["total_revenue", "active_customers"]
        max_deviation: 0.25

processing_defaults:
  aggregation_settings:
    null_handling: "ignore"
    decimal_precision: 2
  time_windows:
    timezone: "UTC"
    start_of_week: "Monday"
  merge_settings:
    match_columns: ["id", "report_date"]
    update_columns: ["metrics", "last_updated"]

error_handling:
  max_retries: 3
  retry_interval: 600
  error_threshold: 0.01
  quarantine_path: "s3://quarantine/gold/{metric_name}/"
  error_reporting:
    format: "json"
    location: "s3://logs/gold_processing/"

monitoring:
  metrics:
    - name: "aggregation_processing_time"
      type: "histogram"
      labels: ["aggregation_name"]
    - name: "records_processed"
      type: "counter"
      labels: ["aggregation_name", "status"]
    - name: "metric_values"
      type: "gauge"
      labels: ["metric_name", "dimension"]
  alerts:
    - name: "metric_anomaly"
      condition: "abs(metric_value - avg_metric_value) > 3 * stddev_metric_value"
      channels: ["slack", "email"]
    - name: "processing_delay"
      condition: "processing_time > 7200"
      channels: ["slack", "pagerduty"]

dependencies:
  - source: "silver.customers"
    freshness: "1 day"
  - source: "silver.transactions"
    freshness: "1 hour"
  - source: "silver.products"
    freshness: "1 day"
